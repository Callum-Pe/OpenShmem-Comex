#!/bin/sh
#
# Copyright (c) 2011 - 2013
#   University of Houston System and Oak Ridge National Laboratory.
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# o Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
# o Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# o Neither the name of the University of Houston System, Oak Ridge
#   National Laboratory nor the names of its contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


#
# NB: this will turn into the GNU autotools setup at some point.
#

# -- defaults --
prefix=/usr/local

comms_layer=
gasnet_root=$prefix
gasnet_conduit=
uccs_root=$prefix

exe_header_dir=/usr/include
exe_lib_dir=/usr/lib64

feature_experimental=disabled
feature_debug=disabled
feature_trace=disabled
feature_pshmem=disabled

libdir=
incdir=
bindir=
modulesdir=
modulefilesdir=

show_progress=YES
# -- end defaults --

# find out where things are
progname="`basename -- $0`"

# canonicalize where source is
srctreedir="`dirname -- $0`"
srctreedir="`cd $srctreedir && pwd`"

# same for where we are
buildtreedir="`pwd`"


tell()
{
    if [ "$show_progress" = "YES" ]
    then
	echo "$progname: $*"
    fi
}

bailout()
{
    tell ""
    tell "Bailing out..."
    exit 1
}

deprecated()
{
    old="$1"
    shift
    tell "Warning: option $old is deprecated, use $@ instead"
}

show_usage()
{
    if [ $# -gt 0 ]
    then
	tell ""
	tell "unknown option \"$@\""
	tell ""
    fi
    cat <<__EOT__
Usage: $progname [options]

  Installation choices:

    --prefix=PREFIX              Install to directory root PREFIX
                                     (default: /usr/local)

    --with-bindir=DIR            Executables installed to DIR
                                     (default: PREFIX/bin)

    --with-libdir=DIR            Libraries installed to DIR
                                     (default: PREFIX/lib)

    --with-includedir=DIR        Header files installed to DIR
                                     (default: PREFIX/include)

    --with-modulesdir=DIR        Pluggable modules installed to DIR
                                     (default: LIBDIR/modules)

    --with-modulefilesdir=DIR    pkg-config file installed to DIR
                                     (default: PREFIX/modulefiles)

  Communications Layer:

    --with-comms-layer=L         Use "L" for communications, e.g. GASNet, UCCS
                                     (currently just a stub)

  Per-layer options:

      --with-gasnet-root=G       Use the GASNet installed under directory G
      --with-gasnet-conduit=C    Use GASNet conduit C
                                   (if only 1 conduit configured, use it)

      --with-uccs-root=U         Use the UCCS installed under directory U
                                   (currently just a stub)

      (These imply --with-comms-layer=GASNet/UCCS as appropriate)

  Optional Support Libraries:

    --with-libelf=LE             Libelf header and library files under
                                     directory LE (.../include, .../lib)
    --with-libelf-headers=H      Libelf header files in directory H
                                     (default: /usr/include)
    --with-libelf-libs=L         Libelf library files in directory L
                                     (default: /usr/lib64)

  Optional features:

    --enable-debug               Run-time debugging checks
    --disable-debug              No run-time debugging checks
                                     (default)

    --enable-trace               Run-time traces
    --disable-trace              No run-time traces
                                     (default)

  Optional and not-stable-yet:

    --enable-experimental        Include experimental features of future
                                     OpenSHMEM versions
    --disable-experimental       No experimental features (default)

    --enable-pshmem              Build the PSHMEM profiling interface
    --disable-pshmem             No PSHMEM profiling interface (default)

  Informational:

    --help                       Show this summary and exit

    --quiet                      Don't provide progress messages

  Environment Variables:

    CC                           C compiler
                                     (default: gcc)
    CFLAGS                       User-supplied options for C compiler
                                     (default: none)
    CXX                          C++ compiler
                                     (default: g++, but not used for build)
    CXXFLAGS                     User-supplied options for C++ compiler
                                     (default: same as CC)
    FC                           Fortran 90 compiler
                                     (default: gfortran, but not used for build)
    FFLAGS                       User-supplied options for Fortran compiler
                                     (default: same as CC)
    LD                           To link the library
                                     (default: same as CC)
    LDFLAGS                      User-supplied options for linker
                                     (default: none)

__EOT__
}

# ------------------------------------------------------------------------------

# split out value from key=value
chompit()
{
    echo $@ | cut -d= -f2-
}

# lower/upper case things
downcase()
{
    echo $* | tr '[:upper:]' '[:lower:]'
}

upcase()
{
    echo $* | tr '[:lower:]' '[:upper:]'
}

# lower case things to remember them canonically
setcanonical()
{
    var=$1
    shift
    tmp="`downcase $*`"
    eval "$var=\"$tmp\""
}

#
# parse command line
#

for o in $@
do
    case $o in
	--prefix=*)
	    prefix="`chompit $o`"
	    ;;
	--with-bindir=*)
	    bindir="`chompit $o`"
	    ;;
	--with-libdir=*)
	    libdir="`chompit $o`"
	    ;;
	--with-includedir=*)
	    incdir="`chompit $o`"
	    ;;
	--with-modulesdir=*)
	    modulesdir="`chompit $o`"
	    ;;
	--with-modulefilesdir=*)
	    modulefilesdir="`chompit $o`"
	    ;;
	--with-comms-layer=*)
	    setcanonical comms_layer "`chompit $o`"
	    ;;
	--with-gasnet-root=*)
	    gasnet_root="`chompit $o`"
	    setcanonical comms_layer GASNet
	    ;;
	--with-gasnet-conduit=*)
	    gasnet_conduit="`chompit $o`"
	    setcanonical comms_layer GASNet
	    ;;
	--with-uccs-root=*)
	    uccs_root="`chompit $o`"
	    setcanonical comms_layer UCCS
	    ;;
	--with-libelf=*)
	    exe_format=ELF
	    exe_top_dir="`chompit $o`"
            exe_header_dir="$exe_top_dir/include"
            exe_lib_dir="$exe_top_dir/lib"
            exe_headers="-I$exe_header_dir"
	    # TODO: try to defer to per-compiler section
            exe_libs="-L$exe_lib_dir -Wl,-rpath,$exe_lib_dir"
            ;;
	--with-libelf-headers=*)
	    exe_format=ELF
	    exe_header_dir="`chompit $o`"
            exe_headers="-I$exe_header_dir"
	    ;;
	--with-libelf-libs=*)
	    exe_format=ELF
	    exe_lib_dir="`chompit $o`"
	    # TODO: try to defer to per-compiler section
            # exe_libs="-L$exe_lib_dir -Wl,-rpath,$exe_lib_dir"
	    ;;
	--enable-debug)
	    feature_debug=enabled
	    ;;
	--disable-debug)
	    feature_debug=disabled
	    ;;
	--enable-trace)
	    feature_trace=enabled
	    ;;
	--disable-trace)
	    feature_trace=disabled
	    ;;
	--enable-pshmem)
	    feature_pshmem=enabled
	    ;;
	--disable-pshmem)
	    feature_pshmem=disabled
	    ;;
	--enable-experimental)
	    feature_experimental=enabled
	    ;;
	--disable-experimental)
	    feature_experimental=disabled
	    ;;
#	--enable-putget-nb)
#	    deprecated "$o" "--enable-experimental"
#	    feature_experimental=enabled
#	    ;;
#	--disable-putget-nb)
#	    deprecated "$o" "--disable-experimental"
#	    feature_experimental=disabled
#	    ;;
	--help)
	    show_usage
	    bailout
	    ;;
	--quiet)
	    show_progress=NO
	    ;;
	*)
	    show_usage $o
	    bailout
	    ;;
    esac
done

# --------------------------------------------------------------------

# bail out immediately if running from source directory (should be in
# separate build directory)
#
# We do this here to allow people to run with --help even in source
# tree

if [ -f "$progname" ]
then
    tell "Looks like we're in the source directory."
    tell "  (There's a file with the same name, \"$progname\", here.)"
    tell ""
    tell "Please run $progname from a separate build directory."
    bailout
fi

# --------------------------------------------------------------------

tell ""
tell "Starting configuration"
tell ""

# -- ELF (TODO: expand for other exe formats) --

tell "Looking for executable format library ... "

exe_format=ELF

case "$exe_format" in
    ELF)
	gelf_h="$exe_header_dir/gelf.h"
	if [ ! -r "$gelf_h" ]
	then
	    tell "  Can't find header <gelf.h> for ELF executable support"
	    tell "    in $exe_header_dir"
	    bailout
	fi
	elf_lib_so="$exe_lib_dir/libelf.so"
	if [ -r "$elf_lib_so" ]
	then
	    found_libexe="shared"
	else
	    elf_lib_a="$exe_lib_dir/libelf.a"
	    if [ -r "$elf_lib_a" ]
	    then
		found_libexe="static"
	    else
		tell "  Can't find library -lelf for ELF executable support"
		tell "    in $exe_lib_dir"
		bailout
	    fi
	fi
	tell "  Found ELF support"
	;;
    *)
	tell "  I don't know executable format \"$exe_format\""
	tell "    I should not be here; please report this"
	bailout
	;;
esac

exe_headers="-I$exe_header_dir"

tell "Looking for executable format library ... done"
tell ""

# -- make sure we can find compilers --

tell "Searching for compilers ..."

# -- either gnu (guess) or from environment --

cc_cmd="${CC-gcc}"

which $cc_cmd >/dev/null 2>&1
if [ $? -ne 0 ]
then
    tell "  I couldn't find the C compiler \"$cc_cmd\""
    bailout
fi

# now see if we can work out how to do C99 compliance and warnings
# where needed

# try to work out the compiler family by querying the C command
cc_ver="`$cc_cmd -V 2>&1`"
if [ $? -ne 0 ]
then
    cc_ver="`$cc_cmd --version 2>&1`"
fi

# 2013-04-23,tonyc: TODO I know some of the exe_libs flags below may
#                   be wrong for specific compilers

case "$cc_ver" in
    *"Free Software Foundation"*)
	cc_type="GNU"
	c99_flags="-std=c99"
	warn_flags="-Wall"
	pic_flags="-fPIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="gfortran"
	cxx_cmd="g++"
	ld_cmd="$cc_cmd"
	;;
    *"Intel Corporation"*)
	cc_type="Intel"
	c99_flags="-std=c99"
	warn_flags=""     # enabled by default
	pic_flags="-fPIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="ifort"
	cxx_cmd="icpc"
	ld_cmd="$cc_cmd"
	;;
    *"The Portland Group"*)
	cc_type="Portland Group"
	c99_flags="-c99"
	warn_flags=""     # enabled by default
	pic_flags="-fPIC"
	thread_flags=""
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="pgfortran"
	cxx_cmd="pgCC"
	ld_cmd="$cc_cmd"
	;;
    *"Sun C"*)
	cc_type="Oracle Studio"
	c99_flags="-xc99"
	warn_flags=""     # enabled by default
	pic_flags="-PIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="sunf90"
	cxx_cmd="sunCC"
	ld_cmd="$cc_cmd"
	;;
    *OpenUH*)
	cc_type="Open64/UH"
	c99_flags="-std=c99"
	warn_flags="-Wall"
	pic_flags="-fPIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="uhf90"
	cxx_cmd="uhCC"
	ld_cmd="$cc_cmd"
	;;
    *Open64*)
	cc_type="Open64"
	c99_flags="-std=c99"
	warn_flags="-Wall"
	pic_flags="-fPIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="openf90"
	cxx_cmd="openCC"
	ld_cmd="$cc_cmd"
	;;
    *clang*)
	cc_type="Clang"
	c99_flags="-std=c99"
	warn_flags="-Wall"
	pic_flags="-fPIC"
	thread_flags="-pthread"
	so_flags="-shared"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	fc_cmd="false"
	cxx_cmd="false"
	ld_cmd="$cc_cmd"
	;;
    *"IBM XL C/C++"*)
	cc_type="IBM XL"
	c99_flags="-qlanglvl=stdc99"
	warn_flags=""
	pic_flags="-qpic"
	thread_flags="-qthreaded"
	exe_libs="-L$exe_lib_dir"
	if  [ "$found_libexe" = "shared" ]
	then
	    exe_libs="$exe_libs -Wl,-rpath,$exe_lib_dir"
	fi
	so_flags="-G"
	cc_cmd="xlc"
	fc_cmd="xlf"
	cxx_cmd="xlc++"
        # TODO: not sure if DCMF works with 64-bit
	# c_flags="$c_flags -q64"
	# fc_flags="$fc_flags -q64"
	# cxx_flags="$cxx_flags -q64"
	# ld_flags="$ld_flags -q64"
	;;
    *)
	cc_type="Not Sure"
	c99_flags=""
	warn_flags=""
	pic_flags=""
	thread_flags=""
	so_flags=""
	exe_headers=""
	exe_libs=""
	fc_cmd="false"
	cxx_cmd="false"
	ld_cmd="false"		# what else to do?
	;;
esac

# -- allow user to override from environment --

cpp_flags=${CPPFLAGS-"$cpp_flags"}
c_flags=${CFLAGS-"$c_flags"}
cxx_cmd=${CXX-"$cxx_cmd"}
cxx_flags=${CXXFLAGS-"$cxx_flags"}
fc_cmd=${FC-"$fc_cmd"}
fc_flags=${FCFLAGS-"$fc_flags"}
ld_cmd=${LD-"$ld_cmd"}
ld_flags=${LDFLAGS-"$ld_flags"}

tell "  C compiler is \"$cc_cmd\" (looks like $cc_type)"

# TODO: we're not actually using these during build, so don't really check
#
# which $cxx_cmd >/dev/null 2>&1
# if [ $? -ne 0 ]
# then
#     tell "I couldn't find the C++ compiler \"$cxx_cmd\""
#     bailout
# fi
# 
# which $fc_cmd >/dev/null 2>&1
# if [ $? -ne 0 ]
# then
#     tell "I couldn't find the Fortran compiler \"$fc_cmd\""
#     bailout
# fi

tell "Searching for compilers ... done"
tell ""

# -- Comms. detection --

tell "Looking for communication layer ... "

case "$comms_layer" in
    gasnet)

	if [ -z "$gasnet_root" ]
	then
	    tell "  I don't know where GASNet is installed"
	    bailout
	fi

	tell "  Checking for GASNet under"
	tell "    $gasnet_root"

        gasnet_h="gasnet_config.h"
        gasnet_inc_dir="$gasnet_root/include"
        gasnet_path_h="$gasnet_inc_dir/$gasnet_h"
        if [ ! -r "$gasnet_path_h" ]
    	then
    	    tell "  I can't find a GASNet installation in \"$gasnet_root\""
    	    tell "    (no $gasnet_h header file)"
    	    tell "  Indicate where GASNet is installed with --with-gasnet-root=DIR"
    	    bailout
        fi

        # check GASNet version (AFAIK we're good with all of them, at least >= 1.14.2)

        find_ver_macro()
        {
    	    var=$1
    	    file=$2
    	    cmd="awk '/GASNET_RELEASE_VERSION_$var/ {print \$3}' $file"
    	    eval $cmd
        }

        gasnet_ver_maj="`find_ver_macro MAJOR $gasnet_path_h`"
        gasnet_ver_min="`find_ver_macro MINOR $gasnet_path_h`"
        gasnet_ver_pch="`find_ver_macro PATCH $gasnet_path_h`"
        if [ -z "$gasnet_ver_maj" -o -z $"gasnet_ver_min" -o -z "$gasnet_ver_pch" ]
    	then
    	    tell "  Couldn't discover full GASNet version in $gasnet_root"
    	    tell "    (should be major.minor.patch)"
    	    bailout
        fi

        gasnet_ver="$gasnet_ver_maj.$gasnet_ver_min.$gasnet_ver_pch"

        tell "  Found GASNet version $gasnet_ver"

        #
        # see if we can autodetect which conduit to use.  if not, offer
        # all installed under the gasnet directory
        #

        KNOWN_CONDUITS="`( cd $gasnet_root/include; echo *-conduit |
                           sed -e 's/-conduit//g' )`"

        if [ "$KNOWN_CONDUITS" = '*' ]
        then
            tell "I couldn't find any GASNet conduits under $gasnet_root"
            bailout
        fi

	tell "  Found conduits: $KNOWN_CONDUITS"

        cdt_auto=""

        #
        # if no conduit asked for on command-line, see if we can
        # auto-detect
        #

        if [ -z "$gasnet_conduit" ]
        then
            kc=`echo $KNOWN_CONDUITS | wc -w`

            if [ $kc -eq 0 ]
            then
                tell "  I couldn't find any GASNet conduits under $gasnet_root"
                bailout
            fi

	    if [ $kc -eq 1 ]
            then
                # only one there, just use it
                gasnet_conduit="$KNOWN_CONDUITS"
        	cdt_auto="(auto-detected)"
                tell ""
                tell "  Only conduit \"$gasnet_conduit\" is configured, selecting it."
                tell ""
            else
                # multiple configured, let the user decide
                tell "  I found the following conduits: \"$KNOWN_CONDUITS\""
                tell "  Indicate which one to use via --with-gasnet-conduit=NAME"
                bailout
            fi
        fi

        # -- ok, we have a candidate conduit --

        gasnet_core_h="gasnet_core.h"
        gasnet_cdt_dir="$gasnet_root/include/${gasnet_conduit}-conduit"
        gasnet_path_core_h="$gasnet_cdt_dir/$gasnet_core_h"
        if [ ! -r "$gasnet_path_core_h" ]
        then
            tell "  The $gasnet_cdt_dir directory doesn't look like a configured conduit"
            tell "    (no $core_h header file)"
            bailout
        fi

        tell "  Chosen conduit \"$gasnet_conduit\" looks OK"
	;;  #  end of gasnet section
    uccs)
	tell "  UCCS support is just a stub for future use."
	bailout
	;;
    *)
	tell "  I don't know what to do with communications layer \"$comms_layer\""
	bailout
	;;
esac

tell "Looking for communication layer ... done"
tell ""

# -- fill in install locations if not known yet --

[ -z "$bindir" ]         && bindir=$prefix/bin
[ -z "$libdir" ]         && libdir=$prefix/lib
[ -z "$incdir" ]         && incdir=$prefix/include
[ -z "$modulesdir" ]     && modulesdir=$libdir/modules
[ -z "$modulefilesdir" ] && modulefilesdir=$prefix/modulefiles

# -- create build directory tree --

# from the source tree, pull in doc, src, and top-level input files

tell "Populating build directory tree ... "

build_me_dirs="
doc
src
"

top_levels="
./Makefile.in
./openshmem.module.in
"

for d in $build_me_dirs $top_levels
do
  find $srctreedir/$d \! -type d -print |
  while read f
  do
    # tell "Found source file $f"
    treepart="`dirname -- $f`"
    treepart="`echo $treepart | sed -e "s%^$srctreedir/%%"`"
    [ -z "$treepart" ] && treepart="."
    mkdir -p $treepart
    (
	cd $treepart
	thispart="`basename -- $f`"
	rm -f $thispart
	ln -s $f
    )
  done
done

tell "Populating build directory tree ... done"
tell ""

# -- generate build files from .in templates --
#
# all .in Makefiles and the module file
#

tell "Making build files from templates ... "

(
    find $build_me_dirs -name 'Makefile.in' -print
    echo $top_levels | tr '[:space:]' '\n'
) |
while read mfin
do
    mf="`echo $mfin | sed -e 's/\.in$//'`"
    sed \
        -e "s%@CC@%$cc_cmd%g" \
        -e "s%@CPPFLAGS@%$cpp_flags%g" \
        -e "s%@CFLAGS@%$c_flags%g" \
        -e "s%@C99FLAGS@%$c99_flags%g" \
        -e "s%@WARNFLAGS@%$warn_flags%g" \
        -e "s%@PICFLAGS@%$pic_flags%g" \
        -e "s%@THREADFLAGS@%$thread_flags%g" \
        -e "s%@SOFLAGS@%$so_flags%g" \
        -e "s%@CXX@%$cxx_cmd%g" \
        -e "s%@CXXFLAGS@%$cxx_flags%g" \
        -e "s%@FC@%$fc_cmd%g" \
        -e "s%@FCFLAGS@%$fc_flags%g" \
        -e "s%@LD@%$ld_cmd%g" \
        -e "s%@LDFLAGS@%$ld_flags%g" \
        -e "s%@COMMS_LAYER@%$comms_layer%g" \
        -e "s%@GASNET_ROOT@%$gasnet_root%g" \
        -e "s%@GASNET_CONDUIT@%$gasnet_conduit%g" \
        -e "s%@EXE_HEADERS@%$exe_headers%g" \
        -e "s%@EXE_LIBS@%$exe_libs%g" \
        -e "s%@FEATURE_EXPERIMENTAL@%$feature_experimental%g" \
        -e "s%@HAVE_FEATURE_PSHMEM@%$feature_pshmem%g" \
        -e "s%@HAVE_FEATURE_DEBUG@%$feature_debug%g" \
        -e "s%@HAVE_FEATURE_TRACE@%$feature_trace%g" \
        -e "s%@PREFIX@%$prefix%g" \
        -e "s%@BIN_DIR@%$bindir%g" \
        -e "s%@LIB_DIR@%$libdir%g" \
        -e "s%@INCLUDE_DIR@%$incdir%g" \
        -e "s%@MODULES_DIR@%$modulesdir%g" \
        -e "s%@MODULEFILES_DIR@%$modulefilesdir%g" \
        < $mfin > $mf
    # This is a bit noisy I think:
    # tell "created $mf from $mfin"
done

tell "Making build files from templates ... done"

# -- tell us all about what's configured --

tell ""
tell "============================================================="
tell ""
tell "-- Configuration Summary --"
tell ""
tell "Compilers:"
tell "  Suite appears to be           $cc_type"
tell "    C compiler is               \"$cc_cmd\""
tell "    C pre-processor flags are   \"$cpp_flags\""
tell "    C flags are                 \"$c_flags\""
tell "    C++ compiler is             \"$cxx_cmd\""
tell "    C++ flags are               \"$cxx_flags\""
tell "    Fortran compiler is         \"$fc_cmd\""
tell "    Fortran flags are           \"$fc_flags\""
tell "    Linker is                   \"$ld_cmd\""
tell "    Linker flags are            \"$ld_flags\""
tell ""
tell "Executable Format:"
tell "  Format is                     $exe_format"
tell "    Headers in                  $exe_header_dir"
tell "    Library in                  $exe_lib_dir ($found_libexe)"
tell ""

tell "Communications Layer:"
case "$comms_layer" in
    gasnet)
	tell "  GASNet:"
	tell "    Version                     $gasnet_ver"
	tell "    Installed in                $gasnet_root"
	tell "    Using conduit               $gasnet_conduit $cdt_auto"
	;;
    uccs)
	tell "  UCCS:"
	tell "    Installed in                $uccs_root"
	tell ""
	tell "  No UCCS support, I should not be here; please report this error"
	;;
    *)
	tell "I do not recognize communications layer \"$comms_layer\"."
	tell "  I should not be here; please report this error"
	bailout
	;;
esac

tell ""
tell "Options:"
tell "  Debug is                      $feature_debug"
tell "  Trace is                      $feature_trace"
tell "  PSHMEM support is             $feature_pshmem"
tell "  Experimental features are     $feature_experimental"
tell ""
tell "Installation:"
tell "  Main package to               $prefix"
tell "  Executables to                $bindir"
tell "  Libraries to                  $libdir"
tell "  Headers to                    $incdir"
tell "  OpenSHMEM modules to          $modulesdir"
tell "  pkg-config file to            $modulefilesdir"

# -- save configure settings, makes it easy to re-run --

cs=./config.status

# respect mktemp & TMPDIR for different OSes

if [ -z "$TMPDIR" ]
then
  template="/tmp"
else
  template="$TMPDIR"
fi
template="$template/tmp.XXXXXX"
tmpcs=`mktemp $template`

# save configuration options for C source code

config_h="./config.h"

# clean up our temporary files on exit, or if something unexpected happens
# but only clean config.h if problem

clean_cfg()
{
    rm -f $config_h
}
clean_tmp()
{
    rm -f $tmpcs
}

signal_trap_list="1 2 3 19 20"

trap clean_cfg   $signal_trap_list
trap clean_tmp 0 $signal_trap_list

cat > $tmpcs <<_EOT_
#!/bin/sh
#
# Copyright (c) 2011 - 2013
#   University of Houston System and Oak Ridge National Laboratory.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# o Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# o Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
# o Neither the name of the University of Houston System, Oak Ridge
#   National Laboratory nor the names of its contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#

#
# generated by $progname: subsequent runs will overwrite
#                         the current contents of this file.
#

CC="$cc_cmd"
CPPFLAGS="$cpp_flags"
CFLAGS="$c_flags"
CXX="$cxx_cmd"
CXXFLAGS="$cxx_flags"
FC="$fc_cmd"
FCFLAGS="$fc_flags"
LD="$ld_cmd"
LDFLAGS="$ld_flags"

export CC
export CXX
export FC
export CPPFLAGS
export CFLAGS
export CXXFLAGS
export FCFLAGS
export LD
export LDFLAGS

$0 $@
_EOT_
cp $tmpcs $cs
chmod +x $cs

# cleanup of temporary file done by signal handler

#
# now create config.h
#

setfeature()
{
    pred="feature_$1"
    eval 'predval=$'$pred
    PRED="`upcase $1`"
    var="HAVE_FEATURE_$PRED"
    shift
    comment="$*"

    echo "/*"
    echo " * $comment"
    echo " */"
    if [ "$predval" = "enabled" ]
    then
	echo "#define $var 1"
    else
	echo "#undef $var"
    fi
    echo ""
}

(
    echo "#ifndef CONFIG_H"
    echo "#define CONFIG_H 1"
    echo

    echo "/*"
    echo " * This file was generated by the $progname script."
    echo " *"
    echo " * It will be re-generated if $progname is re-run."
    echo " *"
    echo " * NOT CURRENTLY USED FOR ANYTHING!"
    echo " *"
    echo " */"
    echo

    setfeature debug        "run-time debug and other sanity checks"
    setfeature trace        "run-time tracing calls"
    setfeature pshmem       "PSHMEM profiling interface"
    setfeature experimental "Experimental (non-API) routines"

    echo "/*"
    echo " * Compiler Suite"
    echo " */"
    echo "#define OPENSHMEM_COMPILER_SUITE         \"$cc_type\""
    echo "#define OPENSHMEM_COMPILER_CC            \"$cc_cmd\""
    echo "#define OPENSHMEM_COMPILER_CPPFLAGS      \"$cpp_flags\""
    echo "#define OPENSHMEM_COMPILER_CFLAGS        \"$c_flags\""
    echo "#define OPENSHMEM_COMPILER_CXX           \"$cxx_cmd\""
    echo "#define OPENSHMEM_COMPILER_CXXFLAGS      \"$cxx_flags\""
    echo "#define OPENSHMEM_COMPILER_FC            \"$fc_cmd\""
    echo "#define OPENSHMEM_COMPILER_FCFLAGS       \"$fc_flags\""
    echo "#define OPENSHMEM_COMPILER_LD            \"$ld_cmd\""
    echo "#define OPENSHMEM_COMPILER_LDFLAGS       \"$ld_flags\""
    echo

    echo "/*"
    echo " * Executable format"
    echo " */"
    echo "#define OPENSHMEM_EXE_FORMAT    \"$exe_format\""
    echo "#define OPENSHMEM_EXE_HEADERS   \"$exe_header_dir\""
    echo "#define OPENSHMEM_EXE_LIBRARIES \"$exe_lib_dir\""
    echo

    echo "/*"
    echo " * Communications Layer"
    echo " */"
    echo         "#define OPENSHMEM_COMMS_LAYER    \"$comms_layer\""
    case "$comms_layer" in
	gasnet)
	    echo "#define OPENSHMEM_HAVE_GASNET    1"
	    echo "#define OPENSHMEM_GASNET_ROOT    \"$gasnet_root\""
	    echo "#define OPENSHMEM_GASNET_CONDUIT \"$gasnet_conduit\""
	    ;;
	uccs)
	    echo "#define OPENSHMEM_HAVE_UCCS      1"
	    echo "#define OPENSHMEM_UCCS_ROOT      \"uccs_root\""
	    # and more, don't know what yet, though
	    ;;
	*)
	    tell "I do not recognize communications layer \"$comms_layer\"."
	    tell "  I should not be here; please report this error"
	    bailout
	    ;;
    esac
    echo


    echo "/*"
    echo " * Installation directories"
    echo " */"

    echo "#define OPENSHMEM_INSTALL_PREFIX \"$prefix\""
    echo "#define OPENSHMEM_INSTALL_BIN    \"$bindir\""
    echo "#define OPENSHMEM_INSTALL_LIB    \"$libdir\""
    echo "#define OPENSHMEM_INSTALL_HDR    \"$incdir\""
    echo "#define OPENSHMEM_INSTALL_MOD    \"$modulesdir\""
    echo "#define OPENSHMEM_INSTALL_PKG    \"$modulefilesdir\""
    echo

    echo "#endif /* CONFIG_H */"
) > $config_h

tell ""
tell "============================================================="
tell ""
tell "C configuration information in  $config_h"
tell ""
tell "Configuration in shell-script   $cs"
tell ""
tell "  (Execute $cs to re-configure library"
tell "   with identical settings)"
tell ""
