#!/bin/sh
#
# Copyright (c) 2011, 2012
#   University of Houston System and Oak Ridge National Laboratory.
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# o Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
# o Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# o Neither the name of the University of Houston System, Oak Ridge
#   National Laboratory nor the names of its contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


#
# NB: this will turn into the GNU autotools setup at some point.
#

progname="`basename $0`"

# -- defaults --
prefix=/usr/local
gasnet_root=$prefix
gasnet_conduit=
elf_header_dir=/usr/include
elf_lib_dir=/usr/lib64
feature_experimental=FALSE
debug=FALSE
trace=FALSE
# -- end defaults --

libdir=
bindir=
modulesdir=
modulefilesdir=

bailout()
{
    tell ""
    tell "Bailing out..."
    exit 1
}

tell()
{
    echo "$progname: $*"
}

deprecated()
{
    old="$1"
    shift
    tell "Warning: option $old is deprecated, use $@ instead"
}

show_usage()
{
    if [ $# -gt 0 ]
    then
	tell ""
	tell "unknown option \"$@\""
	tell ""
    fi
    cat <<__EOT__
Usage: $progname [options]

  Installation choices:

    --prefix=PREFIX              Install to directory root PREFIX
                                     (default: /usr/local)

    --with-bindir=DIR            Executables installed to DIR
                                     (default: PREFIX/bin)

    --with-libdir=DIR            Libraries installed to DIR
                                     (default: PREFIX/lib)

    --with-modulesdir=DIR        Pluggable modules installed to DIR
                                     (default: LIBDIR/modules)

    --with-modulefilesdir=DIR    pkg-config file installed to DIR
                                     (default: PREFIX/modulefiles)

  Communications:

    --with-gasnet-root=G         Use the GASNet installed under directory "G"
    --with-gasnet-conduit=C      Use GASNet conduit "C"
                                     (if only 1 conduit configured, use it)

  Optional Support Libraries:

    --with-libelf=E              Libelf header and library files under
                                     directory "E" (.../include, .../lib)
    --with-libelf-headers=H      Libelf header files in directory "H"
                                     (default: /usr/include)
    --with-libelf-libs=L         Libelf library files in directory "L"
                                     (default: /usr/lib64)

  Optional features:

    --enable-debug               Run-time debugging checks
    --disable-debug              No run-time debugging checks

    --enable-trace               Run-time traces
    --disable-trace              No run-time traces

    --enable-experimental        Include experimental features of future
                                   OpenSHMEM versions
    --disable-experimental       No experimental features (default)

  Deprecated:

    --enable-putget-nb           Same as --enable-experimental
    --disable-putget-nb          Same as --disable-experimental

  Informational:

    --help                       Show this summary and exit

  Environment Variables:

    CC                           C compiler
                                   (default: gcc)
    CFLAGS                       User-supplied options for C compiler
                                   (default: -g)
    CXX                          C++ compiler
                                   (default: g++, but not used)
    CXXFLAGS                     User-supplied options for C++ compiler
                                   (default: -g, but not used)
    FC                           Fortran 90 compiler
                                   (default: gfortran, but not used)
    FFLAGS                       User-supplied options for Fortran compiler
                                   (default: -g, but not used)
    LD                           To link the library
                                   (default: same as CC)
    LDFLAGS                      User-supplied options for linker
                                   (default: none)

__EOT__
}

# ------------------------------------------------------------------------------
#
# parse command line
#

# split out value from key=value
chompit()
{
    echo $@ | cut -d= -f2-
}

for o in $@
do
    case $o in
	--prefix=*)
	    prefix="`chompit $o`"
	    ;;
	--with-bindir=*)
	    bindir="`chompit $o`"
	    ;;
	--with-libdir=*)
	    libdir="`chompit $o`"
	    ;;
	--with-modulesdir=*)
	    modulesdir="`chompit $o`"
	    ;;
	--with-modulefilesdir=*)
	    modulefilesdir="`chompit $o`"
	    ;;
	--with-gasnet-root=*)
	    gasnet_root="`chompit $o`"
	    ;;
	--with-gasnet-conduit=*)
	    gasnet_conduit="`chompit $o`"
	    ;;
	--with-libelf=*)
	    elf_top_dir="`chompit $o`"
            elf_header_dir="$elf_top_dir/include"
            elf_lib_dir="$elf_top_dir/lib"
            elf_headers="-I$elf_header_dir"
            elf_libs="-L$elf_lib_dir -Wl,-rpath,$elf_lib_dir"
            ;;
	--with-libelf-headers=*)
	    elf_header_dir="`chompit $o`"
            elf_headers="-I$elf_header_dir"
	    ;;
	--with-libelf-libs=*)
	    elf_lib_dir="`chompit $o`"
            elf_libs="-L$elf_lib_dir -Wl,-rpath,$elf_lib_dir"
	    ;;
	--enable-debug)
	    debug=TRUE
	    ;;
	--disable-debug)
	    debug=FALSE
	    ;;
	--enable-trace)
	    trace=TRUE
	    ;;
	--disable-trace)
	    trace=FALSE
	    ;;
	--enable-experimental)
	    feature_experimental=TRUE
	    ;;
	--disable-experimental)
	    feature_experimental=FALSE
	    ;;
	--enable-putget-nb)
	    deprecated "$o" "--enable-experimental"
	    feature_experimental=TRUE
	    ;;
	--disable-putget-nb)
	    deprecated "$o" "--disable-experimental"
	    feature_experimental=FALSE
	    ;;
	--help)
	    show_usage
	    bailout
	    ;;
	*)
	    show_usage $o
	    bailout
	    ;;
    esac
done

tell ""
tell "Starting configuration"
tell ""

# -- check compilers, defaults to GNU --

cc_cmd=${CC-gcc}
cpp_flags=${CPPFLAGS-""}
c_flags=${CFLAGS-"-g"}
ld_cmd=${LD-$cc_cmd}
ld_flags=${LDFLAGS-""}
cxx_cmd=${CXX-g++}
cxx_flags=${CXXFLAGS-"-g"}
fc_cmd=${FC-gfortran}
fc_flags=${FCFLAGS-"-g"}

# -- make sure we can find compilers --

tell "Searching for compilers ..."

which $cc_cmd >/dev/null 2>&1
if [ $? -ne 0 ]
then
    tell "I couldn't find the C compiler \"$cc_cmd\""
    bailout
fi
tell "C compiler is \"$cc_cmd\""

# we're not actually using these during build, so don't really check

# which $cxx_cmd >/dev/null 2>&1
# if [ $? -ne 0 ]
# then
#     tell "I couldn't find the C++ compiler \"$cxx_cmd\""
#     bailout
# fi
# 
# which $fc_cmd >/dev/null 2>&1
# if [ $? -ne 0 ]
# then
#     tell "I couldn't find the Fortran compiler \"$fc_cmd\""
#     bailout
# fi

tell "Searching for compilers ... done"
tell ""

# -- ELF (TODO expand for other exe formats) --

tell "Looking for ELF library ... "
gelf_h="$elf_header_dir/gelf.h"
if [ ! -r "$gelf_h" ]
then
    tell "Can't find header <gelf.h> for ELF executable support"
    tell "  in $elf_header_dir"
    bailout
fi
elf_lib_so="$elf_lib_dir/libelf.so"
if [ -r "$elf_lib_so" ]
then
    found_libelf="shared"
else
    elf_lib_a="$elf_lib_dir/libelf.a"
    if [ -r "$elf_lib_a" ]
    then
	found_libelf="static"
    else
	tell "Can't find library -lelf for ELF executable support"
	tell "  in $elf_lib_dir"
	bailout
    fi
fi
tell "Looking for ELF library ... done"
tell ""

# -- GASNet detection --

tell "Looking for GASNet ... "

if [ -z "$gasnet_root" ]
then
    tell "I don't know where GASNet is installed"
    bailout
fi

gasnet_h="gasnet_config.h"
gasnet_inc_dir="$gasnet_root/include"
gasnet_path_h="$gasnet_inc_dir/$gasnet_h"
if [ ! -r "$gasnet_path_h" ]
then
    tell "I can't find a GASNet installation in \"$gasnet_root\""
    tell "  (no $gasnet_h header file)"
    tell "Indicate where GASNet is installed with --with-gasnet-root=DIR"
    bailout
fi

# check GASNet version (AFAIK we're good with all of them, at least >= 1.14.2)

find_ver_macro()
{
    var=$1
    file=$2
    cmd="awk '/GASNET_RELEASE_VERSION_$var/ {print \$3}' $file"
    eval $cmd
}

gasnet_ver_maj="`find_ver_macro MAJOR $gasnet_path_h`"
gasnet_ver_min="`find_ver_macro MINOR $gasnet_path_h`"
gasnet_ver_pch="`find_ver_macro PATCH $gasnet_path_h`"
if [ -z "$gasnet_ver_maj" -o -z $"gasnet_ver_min" -o -z "$gasnet_ver_pch" ]
then
    tell "Couldn't discover GASNet version in $gasnet_root"
    bailout
fi

gasnet_ver="$gasnet_ver_maj.$gasnet_ver_min.$gasnet_ver_pch"

tell "Found GASNet version $gasnet_ver"

#
# see if we can autodetect which conduit to use.  if not, offer
# all installed under the gasnet directory
#

KNOWN_CONDUITS="`( cd $gasnet_root/include; echo *-conduit |
                   sed -e 's/-conduit$//g' )`"

if [ "$KNOWN_CONDUITS" = '*' ]
then
    tell "I couldn't find any GASNet conduits under $gasnet_root"
    bailout
fi

cdt_auto=""

#
# no conduit asked for on command-line
#

if [ -z "$gasnet_conduit" ]
then
    nw=`echo $KNOWN_CONDUITS | wc -w`
    if [ $nw -eq 0 ]
    then
        tell "I couldn't find any GASNet conduits under $gasnet_root"
        bailout
    elif [ $nw -eq 1 ]
    then
        # only one there, just use it
        gasnet_conduit="$KNOWN_CONDUITS"
	cdt_auto="(auto-detected)"
        tell ""
        tell "Only conduit \"$gasnet_conduit\" is configured, selecting it."
        tell ""
    else
        # multiple configured, let the user decide
        tell "I found the following conduits: \"$KNOWN_CONDUITS\""
        tell "Indicate which one to use via --with-gasnet-conduit=NAME"
        bailout
    fi
fi

# -- ok, we have a candidate conduit --

gasnet_core_h="gasnet_core.h"
gasnet_cdt_dir="$gasnet_root/include/${gasnet_conduit}-conduit"
gasnet_path_core_h="$gasnet_cdt_dir/$gasnet_core_h"
if [ ! -r "$gasnet_path_core_h" ]
then
    tell "The $gasnet_cdt_dir directory doesn't look like a configured conduit"
    tell "  (no $core_h header file)"
    bailout
fi
tell "Conduit \"$gasnet_conduit\" looks OK"

tell "Looking for GASNet ... done"
tell ""

# -- fill in install locations --

[ -z "$bindir" ] && bindir=$prefix/bin
[ -z "$libdir" ] && libdir=$prefix/lib
[ -z "$modulesdir" ] && modulesdir=$libdir/modules
[ -z "$modulefilesdir" ] && modulefilesdir=$prefix/modulefiles

# -- generate build files from .in templates --
#
# all .in Makefiles and the module file
#

tell "Making build files from templates ... "

(
    find . -name 'Makefile.in' -print
    echo 'openshmem.module.in'
) |
while read mfin
do
    mf="`echo $mfin | sed -e 's/\.in$//'`"
    sed \
        -e "s%@CC@%$cc_cmd%g" \
        -e "s%@CPPFLAGS@%$cpp_flags%g" \
        -e "s%@CFLAGS@%$c_flags%g" \
        -e "s%@CXX@%$cxx_cmd%g" \
        -e "s%@CXXFLAGS@%$cxx_flags%g" \
        -e "s%@FC@%$fc_cmd%g" \
        -e "s%@FCFLAGS@%$fc_flags%g" \
        -e "s%@LD@%$ld_cmd%g" \
        -e "s%@LDFLAGS@%$ld_flags%g" \
        -e "s%@GASNET_ROOT@%$gasnet_root%g" \
        -e "s%@GASNET_CONDUIT@%$gasnet_conduit%g" \
        -e "s%@ELF_HEADERS@%$elf_headers%g" \
        -e "s%@ELF_LIBS@%$elf_libs%g" \
        -e "s%@FEATURE_EXPERIMENTAL@%$feature_experimental%g" \
        -e "s%@DEBUG@%$debug%g" \
        -e "s%@TRACE@%$trace%g" \
        -e "s%@PREFIX@%$prefix%g" \
        -e "s%@BIN_DIR@%$bindir%g" \
        -e "s%@LIB_DIR@%$libdir%g" \
        -e "s%@MODULES_DIR@%$modulesdir%g" \
        -e "s%@MODULEFILES_DIR@%$modulefilesdir%g" \
        -e "s%@ELF_GETSHDRSTRNDX@%$elf_getshdrstrndx%g" \
        $mfin > $mf
    tell "created $mf from $mfin"
done

tell "Making build files from templates ... done"

# -- tell us all about what's configured --

tell ""
tell "============================================================="
tell ""
tell "-- Configuration Summary --"
tell ""
tell "Compilers:"
tell "  C compiler is                 $cc_cmd"
tell "  C pre-processor flags are     $cpp_flags"
tell "  C flags are                   $c_flags"
tell ""
tell "  C++ compiler is               $cxx_cmd"
tell "  C++ flags are                 $cxx_flags"
tell ""
tell "  Fortran compiler is           $fc_cmd"
tell "  Fortran flags are             $fc_flags"
tell ""
tell "  Linker is                     $ld_cmd"
tell "  Linker flags are              $ld_flags"
tell ""
tell "GASNet:"
tell "  Installed in                  $gasnet_root"
tell "  Using conduit                 $gasnet_conduit $cdt_auto"
tell ""
tell "Executable Format:"
tell "  Headers in                    $elf_header_dir"
tell "  Library in                    $elf_lib_dir ($found_libelf)"
tell ""
tell "Options:"
tell "  Debug is                      $debug"
tell "  Trace is                      $trace"
tell "  Experimental features are     $feature_experimental"
tell ""
tell "Installation:"
tell "  Main package to               $prefix"
tell "  Executables to                $bindir"
tell "  Libraries to                  $libdir"
tell "  OpensHMEM modules to          $modulesdir"
tell "  pkg-config file to            $modulefilesdir"

# -- save configure settings, makes it easy to re-run --

cs=./config.status

# respect mktemp & TMPDIR for different OSes

if [ -z "$TMPDIR" ]
then
  template="/tmp"
else
  template="$TMPDIR"
fi
template="$template/tmp.XXXXXX"
tmpcs=`mktemp $template`

# clean up our temporary file on exit, or if something happens

clean_tmp()
{
    rm -f $tmpcs
}
trap clean_tmp 0 1 2 3 19 20

cat > $tmpcs <<_EOT_
#!/bin/sh
#
# generated by $progname: subsequent runs will overwrite
#                         the current contents of this file.
#

CC="$cc_cmd"
CPPFLAGS="$cpp_flags"
CFLAGS="$c_flags"
CXX="$cxx_cmd"
CXXFLAGS="$cxx_flags"
FC="$fc_cmd"
FCFLAGS="$fc_flags"
LD="$ld_cmd"
LDFLAGS="$ld_flags"

export CC
export CXX
export FC
export CPPFLAGS
export CFLAGS
export CXXFLAGS
export FCFLAGS
export LD
export LDFLAGS

$0 $@
_EOT_
cp $tmpcs $cs
chmod +x $cs

tell ""
tell "============================================================="
tell ""
tell "Configuration in shell-script   $cs"
tell ""
