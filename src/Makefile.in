#
# Copyright (c) 2011 - 2014
#   University of Houston System and Oak Ridge National Laboratory.
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# o Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
# o Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# o Neither the name of the University of Houston System, Oak Ridge
#   National Laboratory nor the names of its contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

SHELL                = /bin/sh

#
# installation root
#
PREFIX               = @PREFIX@

# ---------------------------------------------------------
#
# the communications API lives in .../comms
#

COMMS_LAYER          = @COMMS_LAYER@

COMMS_DIR            = ./comms/$(COMMS_LAYER)
COMMS_CPPFLAGS       = -I$(COMMS_DIR)
COMMS_OBJ            = $(COMMS_DIR)/*.o

# ---------------------------------------------------------
#
# internal utilities
#
UTILS_DIR             = ./utils
UTILS_CPPFLAGS        = -I$(UTILS_DIR)
UTILS_OBJ             = $(UTILS_DIR)/*.o

# ---------------------------------------------------------
#
# atomic operations
#
ATOMIC_DIR           = ./atomic
ATOMIC_CPPFLAGS      = -I$(ATOMIC_DIR)
ATOMIC_OBJ           = $(ATOMIC_DIR)/*.o

# ---------------------------------------------------------
#
# different broadcast algorithms
#
BROADCAST_DIR        = ./broadcast
BROADCAST_CPPFLAGS   = -I$(BROADCAST_DIR)
BROADCAST_OBJ        = $(BROADCAST_DIR)/*.o

# ---------------------------------------------------------
#
# different collect algorithms
#
COLLECT_DIR          = ./collect
COLLECT_CPPFLAGS     = -I$(COLLECT_DIR)
COLLECT_OBJ          = $(COLLECT_DIR)/*.o

FCOLLECT_DIR         = ./fcollect
FCOLLECT_CPPFLAGS    = -I$(FCOLLECT_DIR)
FCOLLECT_OBJ         = $(FCOLLECT_DIR)/*.o

# ---------------------------------------------------------
#
# different barrier algorithms
#
BARRIER_DIR          = ./barrier
BARRIER_CPPFLAGS     = -I$(BARRIER_DIR)
BARRIER_OBJ          = $(BARRIER_DIR)/*.o

BARRIER_ALL_DIR      = ./barrier-all
BARRIER_ALL_CPPFLAGS = -I$(BARRIER_ALL_DIR)
BARRIER_ALL_OBJ      = $(BARRIER_ALL_DIR)/*.o

# ---------------------------------------------------------
#
# parsing out global variables
#
GLOBALVAR_DIR        = ./globalvar
GLOBALVAR_CPPFLAGS   = -I$(GLOBALVAR_DIR)
GLOBALVAR_OBJ        = $(GLOBALVAR_DIR)/*.o

# ---------------------------------------------------------
#
# memory management
#
MALLOC_DIR           = ./dlmalloc
MALLOC_CPPFLAGS      = -I$(MALLOC_DIR)
MALLOC_OBJ           = $(MALLOC_DIR)/*.o

# ---------------------------------------------------------
#
# memory management
#
MEMORY_DIR           = ./memory
MEMORY_CPPFLAGS      = -I$(MEMORY_DIR)
MEMORY_OBJ           = $(MEMORY_DIR)/*.o

# ---------------------------------------------------------
#
# fortran interface
#
FORTRAN_DIR           = ./fortran
FORTRAN_CPPFLAGS      = -I$(FORTRAN_DIR)
FORTRAN_OBJ           = $(FORTRAN_DIR)/*.o

# ---------------------------------------------------------
#
# cache routines
#
CACHE_DIR             = ./cache
CACHE_CPPFLAGS        = -I$(CACHE_DIR)
CACHE_OBJ             = $(CACHE_DIR)/*.o

# ---------------------------------------------------------
#
# PTP synch
#
FENCE_DIR             = ./fence
FENCE_CPPFLAGS        = -I$(FENCE_DIR)
FENCE_OBJ             = $(FENCE_DIR)/*.o

# ---------------------------------------------------------
#
# query state/test objects
#
QUERY_DIR             = ./querying
QUERY_CPPFLAGS        = -I$(QUERY_DIR)
QUERY_OBJ             = $(QUERY_DIR)/*.o

# ---------------------------------------------------------
#
# point-to-point: puts 'n' gets
#
PTP_DIR               = ./ptp
PTP_CPPFLAGS          = -I$(PTP_DIR)
PTP_OBJ               = $(PTP_DIR)/*.o

# ---------------------------------------------------------
#
# initialize and finalize
#
UPDOWN_DIR            = ./updown
UPDOWN_CPPFLAGS       = -I$(UPDOWN_DIR)
UPDOWN_OBJ            = $(UPDOWN_DIR)/*.o

# ---------------------------------------------------------
#
# reductions
#
REDUCE_DIR            = ./reduce
REDUCE_CPPFLAGS       = -I$(REDUCE_DIR)
REDUCE_OBJ            = $(REDUCE_DIR)/*.o

# ---------------------------------------------------------
#
# profiling
#
PROFILING_DIR         = ./profiling
PROFILING_CPPFLAGS    = -I$(PROFILING_DIR)
PROFILING_OBJ         = $(PROFILING_DIR)/*.o

# ---------------------------------------------------------
#
# wallclock time
#
WTIME_DIR             = ./wtime
WTIME_CPPFLAGS        = -I$(WTIME_DIR)
WTIME_OBJ             = $(WTIME_DIR)/*.o

# ---------------------------------------------------------

#
# this is where the C compiler gets chosen along with the various
# flags that do PIC, dependency, debug/optimize and C99 compliance
#

CC               = @CC@
CXX              = @CXX@
FC               = @FC@
CFLAGS           = @CFLAGS@
CPPFLAGS         = @CPPFLAGS@
LD               = @LD@
LDFLAGS          = @LDFLAGS@

M4               = m4
M4FLAGS          =

AR               = ar
ARFLAGS          = cqv
RANLIB           = ranlib

# CPPFLAGS        += -MMD
CPPFLAGS        += $(UTILS_CPPFLAGS)
CPPFLAGS        += $(COMMS_CPPFLAGS)
CPPFLAGS        += $(ATOMIC_CPPFLAGS)
CPPFLAGS        += $(BARRIER_CPPFLAGS)
CPPFLAGS        += $(BARRIER_ALL_CPPFLAGS)
CPPFLAGS        += $(BROADCAST_CPPFLAGS)
CPPFLAGS        += $(COLLECT_CPPFLAGS)
CPPFLAGS        += $(FCOLLECT_CPPFLAGS)
CPPFLAGS        += $(GLOBALVAR_CPPFLAGS)
CPPFLAGS        += $(MALLOC_CPPFLAGS)
CPPFLAGS        += $(MEMORY_CPPFLAGS)
CPPFLAGS        += $(QUERY_CPPFLAGS)
CPPFLAGS        += $(PTP_CPPFLAGS)
CPPFLAGS        += $(UPDOWN_CPPFLAGS)
CPPFLAGS        += $(REDUCE_CPPFLAGS)
CPPFLAGS        += $(WTIME_CPPFLAGS)

ifeq "@HAVE_FEATURE_DEBUG@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_DEBUG
endif

ifeq "@HAVE_FEATURE_TRACE@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_TRACE
endif

ifeq "@HAVE_FEATURE_PSHMEM@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_PSHMEM
endif

ifeq "@HAVE_FEATURE_EXPERIMENTAL@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_EXPERIMENTAL
M4FLAGS          = -DHAVE_FEATURE_EXPERIMENTAL
endif

CFLAGS          += @THREADFLAGS@

CFLAGS          += @C99FLAGS@
CFLAGS          += @WARNFLAGS@

# for "so" libraries
CFLAGS          += @PICFLAGS@
LDFLAGS         += @PICFLAGS@

SOFLAGS          = @SOFLAGS@

# -- compiler-independent options -------------------------

COMMON_FLAGS     = $(CPPFLAGS) $(CFLAGS)

# ---------------------------------------------------------

SHMEM_LIB_DIR    = @LIB_DIR@
SHMEM_LIBNAME    = openshmem

SHMEM_LIBRARY_SO = lib$(SHMEM_LIBNAME).so
SHMEM_LIBRARY_A  = lib$(SHMEM_LIBNAME).a

SHMEM_INC_DIR    = @INC_DIR@
SHMEM_HEADERS    = shmem.h shmem.fh pshmem.h pshmem.fh
ifeq "@HAVE_FEATURE_EXPERIMENTAL@" "enabled"
SHMEM_HEADERS   += shmemx.h shmemx.fh pshmemx.h pshmemx.fh
endif

# NOTE: elf and dl are hardwired for now
# LIBS             = @EXE_LIBS@ -lelf -ldl

INSTALL          = install -c
REMOVE           = rm -f

#
# internal sub-API
#
INT_OBJ_GEN      =
INT_OBJ_GEN     += utils-obj-gen
INT_OBJ_GEN     += comms-obj-gen
INT_OBJ_GEN     += globalvar-obj-gen
INT_OBJ_GEN     += malloc-obj-gen
#
# API
#
API_OBJ_GEN      =
API_OBJ_GEN     += updown-obj-gen
API_OBJ_GEN     += query-obj-gen
API_OBJ_GEN     += barrier-obj-gen
API_OBJ_GEN     += barrier-all-obj-gen
API_OBJ_GEN     += memory-obj-gen
API_OBJ_GEN     += atomic-obj-gen
API_OBJ_GEN     += fence-obj-gen
API_OBJ_GEN     += cache-obj-gen
API_OBJ_GEN     += ptp-obj-gen
API_OBJ_GEN     += broadcast-obj-gen
API_OBJ_GEN     += collect-obj-gen
API_OBJ_GEN     += fcollect-obj-gen
API_OBJ_GEN     += reduce-obj-gen
API_OBJ_GEN     += fortran-obj-gen
API_OBJ_GEN     += profiling-obj-gen
API_OBJ_GEN     += wtime-obj-gen

OBJ_GEN          = $(INT_OBJ_GEN) $(API_OBJ_GEN)

# ---------------------------------------------------------

.PHONY: firstpass
.PHONY: all default
.PHONY:	$(OBJ_GEN)
.PHONY:	shmem-headers
.PHONY: install install-comms install-include
.PHONY: uninstall uninstall-comms uninstall-include
.PHONY: tidy clean distclean

# ---------------------------------------------------------

#
# very first thing we need to do is expose the inlined comms setup and
# the paths to headers and make fragments
#
firstpass:
	$(MAKE) -C $(COMMS_DIR) $@

all default:	firstpass	shmem-headers $(SHMEM_LIBRARY_A)

install:	all default install-lib install-include install-comms

install-lib:    all
	mkdir -p $(DESTDIR)$(SHMEM_LIB_DIR)
	$(INSTALL) $(SHMEM_LIBRARY_A) $(DESTDIR)$(SHMEM_LIB_DIR)

install-include: all
	mkdir -p $(DESTDIR)$(SHMEM_INC_DIR)/mpp
	( \
		for h in $(SHMEM_HEADERS); \
		do \
			$(INSTALL) -m 644 $$h $(DESTDIR)$(SHMEM_INC_DIR); \
			$(INSTALL) -m 644 mpp/$$h $(DESTDIR)$(SHMEM_INC_DIR)/mpp; \
		done \
	)

install-comms:	all
	$(MAKE) -C $(COMMS_DIR) install

# we may be sharing the install area with other packages, so don't
# blindly zap directories when uninstalling, allow them to remain
# there gracefully.

uninstall:	uninstall-comms uninstall-include uninstall-lib
	- rmdir $(DESTDIR)$(PREFIX)

uninstall-comms:
	$(MAKE) -C $(COMMS_DIR) uninstall

uninstall-include:
	for h in $(SHMEM_HEADERS); \
	do \
		$(REMOVE) $(DESTDIR)$(SHMEM_INC_DIR)/mpp/$$h; \
		$(REMOVE) $(DESTDIR)$(SHMEM_INC_DIR)/$$h; \
	done
	- rmdir $(DESTDIR)$(SHMEM_INC_DIR)/mpp
	- rmdir $(DESTDIR)$(SHMEM_INC_DIR)

uninstall-lib:
	$(REMOVE) $(DESTDIR)$(SHMEM_LIB_DIR)/$(SHMEM_LIBRARY_A)
	- rmdir $(DESTDIR)$(SHMEM_LIB_DIR)

# -- header files ------------------------------------------

# these are now no-ops as experimental features have moved to
# their own header <shmemx.h>

shmem-headers:

#shmem.h:	shmem.h.in
#	$(M4) $(M4FLAGS) < $^ > $@

#pshmem.h:	pshmem.h.in
#	$(M4) $(M4FLAGS) < $^ > $@

#shmem.fh:	shmem.fh.in
#	$(M4) $(M4FLAGS) < $^ > $@

#pshmem.fh:	pshmem.fh.in
#	$(M4) $(M4FLAGS) < $^ > $@

# -- build supporting objects as above ---------------------

utils-obj-gen:
	$(MAKE) -C $(UTILS_DIR) all

comms-obj-gen:
	$(MAKE) -C $(COMMS_DIR) all

globalvar-obj-gen:
	$(MAKE) -C $(GLOBALVAR_DIR) all

malloc-obj-gen:
	$(MAKE) -C $(MALLOC_DIR) all


updown-obj-gen:
	$(MAKE) -C $(UPDOWN_DIR) all

query-obj-gen:
	$(MAKE) -C $(QUERY_DIR) all

barrier-obj-gen:
	$(MAKE) -C $(BARRIER_DIR) all

barrier-all-obj-gen:
	$(MAKE) -C $(BARRIER_ALL_DIR) all

memory-obj-gen:
	$(MAKE) -C $(MEMORY_DIR) all

atomic-obj-gen:
	$(MAKE) -C $(ATOMIC_DIR) all

fence-obj-gen:
	$(MAKE) -C $(FENCE_DIR) all

cache-obj-gen:
	$(MAKE) -C $(CACHE_DIR) all

ptp-obj-gen:
	$(MAKE) -C $(PTP_DIR) all

broadcast-obj-gen:
	$(MAKE) -C $(BROADCAST_DIR) all

collect-obj-gen:
	$(MAKE) -C $(COLLECT_DIR) all

fcollect-obj-gen:
	$(MAKE) -C $(FCOLLECT_DIR) all

reduce-obj-gen:
	$(MAKE) -C $(REDUCE_DIR) all

fortran-obj-gen:
	$(MAKE) -C $(FORTRAN_DIR) all

profiling-obj-gen:
	$(MAKE) -C $(PROFILING_DIR) all

wtime-obj-gen:
	$(MAKE) -C $(WTIME_DIR) all

# -- otherwise, compile everything else like this ---------

%.o:	%.c
	$(CC) $(WARNINGS) $(COMMON_FLAGS) $(DEBUG_ME) -c -o $@ $<

# -- generate the shared object library -------------------

$(SHMEM_LIBRARY_SO):	$(OBJ_GEN)
	$(LD) \
		$(LDFLAGS) $(SOFLAGS) \
		-o $@ \
		$(UTILS_OBJ) $(COMMS_OBJ) $(GLOBALVAR_OBJ) \
		$(MALLOC_OBJ) $(UPDOWN_OBJ) $(QUERY_OBJ) \
		$(BARRIER_OBJ) $(BARRIER_ALL_OBJ) \
		$(MEMORY_OBJ) $(ATOMIC_OBJ) $(FENCE_OBJ) $(CACHE_OBJ) \
		$(PTP_OBJ) $(BROADCAST_OBJ) $(COLLECT_OBJ) $(FCOLLECT_OBJ) \
		$(FORTRAN_OBJ) $(REDUCE_OBJ) $(PROFILING_OBJ) $(WTIME_OBJ) \
		$(LIBS)

# -- generate the archive object library -------------------

$(SHMEM_LIBRARY_A):	$(OBJ_GEN)
	$(AR) \
		$(ARFLAGS) \
		$@ \
		$(UTILS_OBJ) $(COMMS_OBJ) $(GLOBALVAR_OBJ) \
		$(MALLOC_OBJ) $(UPDOWN_OBJ) $(QUERY_OBJ) \
		$(BARRIER_OBJ) $(BARRIER_ALL_OBJ) \
		$(MEMORY_OBJ) $(ATOMIC_OBJ) $(FENCE_OBJ) $(CACHE_OBJ) \
		$(PTP_OBJ) $(BROADCAST_OBJ) $(COLLECT_OBJ) $(FCOLLECT_OBJ) \
		$(FORTRAN_OBJ) $(REDUCE_OBJ) $(PROFILING_OBJ) $(WTIME_OBJ)
	- $(RANLIB) $@

# ---------------------------------------------------------

tidy clean:
	$(MAKE) -C $(WTIME_DIR) $@
	$(MAKE) -C $(PROFILING_DIR) $@
	$(MAKE) -C $(REDUCE_DIR) $@
	$(MAKE) -C $(FORTRAN_DIR) $@
	$(MAKE) -C $(MEMORY_DIR) $@
	$(MAKE) -C $(FCOLLECT_DIR) $@
	$(MAKE) -C $(COLLECT_DIR) $@
	$(MAKE) -C $(BROADCAST_DIR) $@
	$(MAKE) -C $(PTP_DIR) $@
	$(MAKE) -C $(CACHE_DIR) $@
	$(MAKE) -C $(FENCE_DIR) $@
	$(MAKE) -C $(ATOMIC_DIR) $@
	$(MAKE) -C $(BARRIER_DIR) $@
	$(MAKE) -C $(BARRIER_ALL_DIR) $@
	$(MAKE) -C $(QUERY_DIR) $@
	$(MAKE) -C $(UPDOWN_DIR) $@
	$(MAKE) -C $(MALLOC_DIR) $@
	$(MAKE) -C $(GLOBALVAR_DIR) $@
	$(MAKE) -C $(COMMS_DIR) $@
	$(MAKE) -C $(UTILS_DIR) $@
	$(REMOVE) $(SHMEM_LIBRARY_A)

distclean: clean
	$(REMOVE) Makefile
