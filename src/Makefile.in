#
# Copyright (c) 2011 - 2013
#   University of Houston System and Oak Ridge National Laboratory.
# 
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# o Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# 
# o Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
# 
# o Neither the name of the University of Houston System, Oak Ridge
#   National Laboratory nor the names of its contributors may be used to
#   endorse or promote products derived from this software without specific
#   prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


#
# installation root
#
PREFIX               = @PREFIX@

# ---------------------------------------------------------
#
# the communications API lives in .../comms.o
#

COMMS_LAYER          = @COMMS_LAYER@

COMMS_DIR            = ./comms/$(COMMS_LAYER)
COMMS_CPPFLAGS       = -I$(COMMS_DIR)
COMMS_OBJ            = $(COMMS_DIR)/*.o

# ---------------------------------------------------------
#
# atomic operations
#
ATOMIC_DIR           = ./atomic
ATOMIC_CPPFLAGS      = -I$(ATOMIC_DIR)
ATOMIC_OBJ           = $(ATOMIC_DIR)/*.o

# ---------------------------------------------------------
#
# different broadcast algorithms
#
BROADCAST_DIR        = ./broadcast
BROADCAST_CPPFLAGS   = -I$(BROADCAST_DIR)
BROADCAST_OBJ        = $(BROADCAST_DIR)/broadcast.o

# ---------------------------------------------------------
#
# different collect algorithms
#
COLLECT_DIR          = ./collect
COLLECT_CPPFLAGS     = -I$(COLLECT_DIR)
COLLECT_OBJ          = $(COLLECT_DIR)/collect.o

FCOLLECT_DIR         = ./fcollect
FCOLLECT_CPPFLAGS    = -I$(FCOLLECT_DIR)
FCOLLECT_OBJ         = $(FCOLLECT_DIR)/fcollect.o

# ---------------------------------------------------------
#
# different collect algorithms
#
BARRIER_DIR          = ./barrier
BARRIER_CPPFLAGS     = -I$(BARRIER_DIR)
BARRIER_OBJ          = $(BARRIER_DIR)/barrier.o

# ---------------------------------------------------------
#
# parsing out global variables
#
GLOBALVAR_DIR        = ./globalvar
GLOBALVAR_CPPFLAGS   = -I$(GLOBALVAR_DIR)
GLOBALVAR_OBJ        = $(GLOBALVAR_DIR)/*.o

# ---------------------------------------------------------
#
# memory management
#
MALLOC_DIR           = ./dlmalloc
MALLOC_CPPFLAGS      = -I$(MALLOC_DIR)
MALLOC_OBJ           = $(MALLOC_DIR)/*.o

# ---------------------------------------------------------
#
# memory management
#
MEMORY_DIR           = ./memory
MEMORY_CPPFLAGS      = -I$(MEMORY_DIR)
MEMORY_OBJ           = $(MEMORY_DIR)/*.o

# ---------------------------------------------------------
#
# loadable modules management
#
MODULES_DIR           = ./modules
MODULES_CPPFLAGS      = -I$(MODULES_DIR)
MODULES_OBJ           = $(MODULES_DIR)/*.o

# ---------------------------------------------------------
#
# fortran interface
#
FORTRAN_DIR           = ./fortran
FORTRAN_CPPFLAGS      = -I$(FORTRAN_DIR)
FORTRAN_OBJ           = $(FORTRAN_DIR)/*.o

# ---------------------------------------------------------

#
# this is where the C compiler gets chosen along with the various
# flags that do PIC, dependency, debug/optimize and C99 compliance
#

CC               = @CC@
CXX              = @CXX@
FC               = @FC@
CFLAGS           = @CFLAGS@
CPPFLAGS         = @CPPFLAGS@
LD               = @LD@
LDFLAGS          = @LDFLAGS@

M4               = m4
M4FLAGS          =

# CPPFLAGS        += -MMD
CPPFLAGS        += $(COMMS_CPPFLAGS)
CPPFLAGS        += $(ATOMIC_CPPFLAGS)
CPPFLAGS        += $(BARRIER_CPPFLAGS)
CPPFLAGS        += $(BROADCAST_CPPFLAGS)
CPPFLAGS        += $(COLLECT_CPPFLAGS)
CPPFLAGS        += $(FCOLLECT_CPPFLAGS)
CPPFLAGS        += $(GLOBALVAR_CPPFLAGS)
CPPFLAGS        += $(MALLOC_CPPFLAGS)
CPPFLAGS        += $(MEMORY_CPPFLAGS)
CPPFLAGS        += $(MODULES_CPPFLAGS)

CPPFLAGS        += -I./include

ifeq "@HAVE_FEATURE_DEBUG@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_DEBUG
endif

ifeq "@HAVE_FEATURE_TRACE@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_TRACE
endif

ifeq "@HAVE_FEATURE_PSHMEM@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_PSHMEM
endif

ifeq "@FEATURE_EXPERIMENTAL@" "enabled"
CPPFLAGS        += -DHAVE_FEATURE_EXPERIMENTAL
M4FLAGS          = -DHAVE_FEATURE_EXPERIMENTAL
endif

CFLAGS          += @THREADFLAGS@

CFLAGS          += @C99FLAGS@
CFLAGS          += @WARNFLAGS@

# for "so" libraries
CFLAGS          += @PICFLAGS@
LDFLAGS         += @PICFLAGS@

SOFLAGS          = @SOFLAGS@

# -- compiler-independent options -------------------------

COMMON_FLAGS     = $(CPPFLAGS) $(CFLAGS)

# ---------------------------------------------------------

# init.
SHMEM_SOURCES    =

# internal
SHMEM_SOURCES   +=	state.c trace.c clock.c ping.c exe.c

# API
SHMEM_SOURCES   +=	reduce-op.c
#
SHMEM_SOURCES   +=	accessible.c ptr.c
#
SHMEM_SOURCES   +=	cache.c fence.c
#
SHMEM_SOURCES   +=	putget.c strided.c
SHMEM_SOURCES   +=	putget_nb.c
#
SHMEM_SOURCES   +=	query.c updown.c waituntil.c
#
SHMEM_SOURCES   +=	profiling.c


SHMEM_OBJECTS    = $(SHMEM_SOURCES:.c=.o)
SHMEM_DEPFILES   = $(SHMEM_SOURCES:.c=.d)
SHMEM_LIB_DIR    = @LIB_DIR@
SHMEM_LIBNAME    = openshmem
SHMEM_LIBRARY    = lib$(SHMEM_LIBNAME).so
SHMEM_INC_DIR    = @INCLUDE_DIR@
SHMEM_HEADERS    = shmem.h shmem.fh pshmem.h

LDFLAGS         += @ELF_LIBS@
LIBS             = -lelf -ldl

INSTALL          = install -c
REMOVE           = rm -f

OBJ_GEN          = comms-obj-gen globalvar-obj-gen \
			broadcast-obj-gen \
			collect-obj-gen fcollect-obj-gen \
			barrier-obj-gen \
			atomic-obj-gen \
			malloc-obj-gen memory-obj-gen \
			modules-obj-gen \
			fortran-obj-gen

# ---------------------------------------------------------

.PHONY: all default
.PHONY:	$(OBJ_GEN)
.PHONY:	shmem-headers
.PHONY: install install-lib install-comms install-include
.PHONY: uninstall uninstall-lib uninstall-comms uninstall-include
.PHONY: clean distclean

# ---------------------------------------------------------

all default:	$(SHMEM_HEADERS) $(SHMEM_LIBRARY)

install:	install-lib install-comms install-include

install-lib:	all
	mkdir -p $(SHMEM_LIB_DIR)
	$(INSTALL) $(SHMEM_LIBRARY) $(SHMEM_LIB_DIR)
	$(MAKE) -C $(BROADCAST_DIR) $@
	$(MAKE) -C $(COLLECT_DIR) $@
	$(MAKE) -C $(FCOLLECT_DIR) $@
	$(MAKE) -C $(BARRIER_DIR) $@
	$(MAKE) -C $(MODULES_DIR) $@

install-comms:	all
	$(MAKE) -C $(COMMS_DIR) install

install-include:	all
	mkdir -p $(SHMEM_INC_DIR)/mpp
	( \
		for h in $(SHMEM_HEADERS); \
		do \
			$(INSTALL) -m 644 $$h $(SHMEM_INC_DIR); \
			$(INSTALL) -m 644 mpp/$$h $(SHMEM_INC_DIR)/mpp; \
		done \
	)

# we may be sharing the install area with other packages, so don't
# blindly zap directories when uninstalling, allow them to remain
# there gracefully.

uninstall:	uninstall-include uninstall-comms uninstall-lib
	- rmdir $(PREFIX)

uninstall-lib:
	$(MAKE) -C $(MODULES_DIR) $@
	$(MAKE) -C $(BARRIER_DIR) $@
	$(MAKE) -C $(FCOLLECT_DIR) $@
	$(MAKE) -C $(COLLECT_DIR) $@
	$(MAKE) -C $(BROADCAST_DIR) $@
	$(REMOVE) $(SHMEM_LIB_DIR)/$(SHMEM_LIBRARY)
	- rmdir $(SHMEM_LIB_DIR)

uninstall-comms:
	$(MAKE) -C $(COMMS_DIR) uninstall

uninstall-include:
	for h in $(SHMEM_HEADERS); \
	do \
		$(REMOVE) $(SHMEM_INC_DIR)/mpp/$$h; \
		$(REMOVE) $(SHMEM_INC_DIR)/$$h; \
	done
	- rmdir $(SHMEM_INC_DIR)/mpp
	- rmdir $(SHMEM_INC_DIR)

# -- header files ------------------------------------------

shmem-headers: $(SHMEM_HEADERS)

shmem.h:	shmem.h.in
	$(M4) $(M4FLAGS) < $^ > $@

pshmem.h:	pshmem.h.in
	$(M4) $(M4FLAGS) < $^ > $@

shmem.fh:	shmem.fh.in
	$(M4) $(M4FLAGS) < $^ > $@

# -- comms layer -------------------------------------------

comms-obj-gen:
	$(MAKE) -C $(COMMS_DIR) all

# -- atomics -----------------------------------------------

atomic-obj-gen:
	$(MAKE) -C $(ATOMIC_DIR) all

# -- broadcast methods -------------------------------------

broadcast-obj-gen:
	$(MAKE) -C $(BROADCAST_DIR) all

# -- barrier methods ---------------------------------------

barrier-obj-gen:
	$(MAKE) -C $(BARRIER_DIR) all

# -- collect methods ---------------------------------------

collect-obj-gen:
	$(MAKE) -C $(COLLECT_DIR) all

fcollect-obj-gen:
	$(MAKE) -C $(FCOLLECT_DIR) all

# -- global variable----------------------------------------

globalvar-obj-gen:
	$(MAKE) -C $(GLOBALVAR_DIR) all

# -- symmetric heap allocation -----------------------------

malloc-obj-gen:
	$(MAKE) -C $(MALLOC_DIR) all

# -- memory management for symmetric heap ------------------

memory-obj-gen:
	$(MAKE) -C $(MEMORY_DIR) all

# -- loadable modules for algorithms (broadcast etc) -------

modules-obj-gen:
	$(MAKE) -C $(MODULES_DIR) all

# -- fortran interface ------------------------------------

fortran-obj-gen:
	$(MAKE) -C $(FORTRAN_DIR) all

# -- otherwise, compile everything else like this ---------

%.o:	%.c
	$(CC) $(WARNINGS) $(COMMON_FLAGS) $(DEBUG_ME) -c -o $@ $<

# -- generate the shared object library -------------------

$(SHMEM_LIBRARY):	$(OBJ_GEN) $(SHMEM_OBJECTS)
	$(LD) \
		$(LDFLAGS) \
		$(SOFLAGS) \
		-o $@ \
		$(COMMS_OBJ) \
		$(GLOBALVAR_OBJ) \
		$(BROADCAST_OBJ) \
		$(BARRIER_OBJ) \
		$(FCOLLECT_OBJ) \
		$(COLLECT_OBJ) \
		$(ATOMIC_OBJ) \
		$(MALLOC_OBJ) \
		$(MEMORY_OBJ) \
		$(MODULES_OBJ) \
		$(FORTRAN_OBJ) \
		$(SHMEM_OBJECTS) \
		$(LIBS)

# ---------------------------------------------------------

clean:
	$(REMOVE) $(SHMEM_OBJECTS)
	$(MAKE) -C $(FORTRAN_DIR) $@
	$(MAKE) -C $(MODULES_DIR) $@
	$(MAKE) -C $(MEMORY_DIR) $@
	$(MAKE) -C $(MALLOC_DIR) $@
	$(MAKE) -C $(COMMS_DIR) $@
	$(MAKE) -C $(GLOBALVAR_DIR) $@
	$(MAKE) -C $(BROADCAST_DIR) $@
	$(MAKE) -C $(COLLECT_DIR) $@
	$(MAKE) -C $(FCOLLECT_DIR) $@
	$(MAKE) -C $(BARRIER_DIR) $@
	$(MAKE) -C $(ATOMIC_DIR) $@
	$(REMOVE) $(SHMEM_LIBRARY)
	$(REMOVE) $(SHMEM_HEADERS)

distclean: clean
	$(REMOVE) Makefile
