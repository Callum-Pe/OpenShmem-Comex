#
# installation root
#
PREFIX           = @PREFIX@

# ---------------------------------------------------------
#
# the communications API lives in .../comms.o
#
COMMS_DIR            = ./comms
COMMS_CPPFLAGS       = -I$(COMMS_DIR)
COMMS_OBJ            = $(COMMS_DIR)/comms.o

# ---------------------------------------------------------
#
# different broadcast algorithms
#
BROADCAST_DIR        = ./broadcast
BROADCAST_CPPFLAGS   = -I$(BROADCAST_DIR)
BROADCAST_OBJ        = $(BROADCAST_DIR)/*.o

# ---------------------------------------------------------
#
# different collect algorithms
#
COLLECT_DIR          = ./collect
COLLECT_CPPFLAGS     = -I$(COLLECT_DIR)
COLLECT_OBJ          = $(COLLECT_DIR)/*.o

# ---------------------------------------------------------
#
# different collect algorithms
#
BARRIER_DIR          = ./barrier
BARRIER_CPPFLAGS     = -I$(BARRIER_DIR)
BARRIER_OBJ          = $(BARRIER_DIR)/*.o

# ---------------------------------------------------------
#
# parsing out global variables
#
GLOBALVAR_DIR        = ./globalvar
GLOBALVAR_CPPFLAGS   = -I$(GLOBALVAR_DIR)
GLOBALVAR_OBJ        = $(GLOBALVAR_DIR)/globalvar.o

# ---------------------------------------------------------
#
# hash table implementation
#
HASH_DIR         = ./uthash
HASH_CFLAGS      = -I$(HASH_DIR)

# ---------------------------------------------------------
#
# the malloc library
#
MALLOC_DIR       = ./dlmalloc
MALLOC_SRC       = $(MALLOC_DIR)/dlmalloc.c
MALLOC_OBJECT    = $(MALLOC_SRC:.c=.o)
MALLOC_CPPFLAGS  = -I$(MALLOC_DIR)

# ---------------------------------------------------------

#
# this is where the C compiler gets chosen along with the various
# flags that do PIC, dependency, debug/optimize and C99 compliance
#

# Sun/Oracle Studio: state = testing
#CC               = suncc
#CPPFLAGS        += -xMMD
#CFLAGS          += -PIC
#CFLAGS          += -xc99=all
#DEBUG_AND_OPT    = -ggdb -xO0
#WARNINGS         =
# WARNINGS        += -pedantic

CC               = @CC@
CFLAGS           = @CFLAGS@
CPPFLAGS         = @CPPFLAGS@
LD               = @LD@
LDFLAGS          = @LDFLAGS@

# CPPFLAGS        += -MMD
CPPFLAGS        += $(COMMS_CPPFLAGS)
CPPFLAGS        += $(BARRIER_CPPFLAGS)
CPPFLAGS        += $(BROADCAST_CPPFLAGS)
CPPFLAGS        += $(GLOBALVAR_CPPFLAGS)

CPPFLAGS        += -I.

ifeq "@DEBUG@" "TRUE"
CPPFLAGS        += -DDEBUG
endif

ifeq "@CRAY_COMPAT@" "TRUE"
CPPFLAGS        += -DCRAY_COMPAT
endif

ifeq "@PUTGET_NB@" "TRUE"
CPPFLAGS        += -DHAVE_PUTGET_NB
endif

CFLAGS          += -fPIC
CFLAGS          += -std=c99
CFLAGS          += -Wall

LDFLAGS         += -fPIC

# -- compiler-independent options -------------------------

COMMON_FLAGS     = $(CPPFLAGS) $(CFLAGS)

# ---------------------------------------------------------

# communication library dependent
SHMEM_SOURCES    =	service.c
# internal
SHMEM_SOURCES   +=	state.c memalloc.c \
			trace.c clock.c ping.c symmtest.c
# Fortran API
SHMEM_SOURCES   +=	fortran-mem.c fortran.c
# API
SHMEM_SOURCES   +=	atomic.c lock.c
#
SHMEM_SOURCES   +=	reduce-op.c
#
SHMEM_SOURCES   +=	accessible.c ptr.c
#
SHMEM_SOURCES   +=	cache.c fence.c
#
SHMEM_SOURCES   +=	putget.c strided.c
SHMEM_SOURCES   +=	putget_nb.c
#
SHMEM_SOURCES   +=	query.c symmem.c updown.c waituntil.c
#
SHMEM_SOURCES   +=	version.c


SHMEM_OBJECTS    = $(SHMEM_SOURCES:.c=.o)
SHMEM_DEPFILES   = $(SHMEM_SOURCES:.c=.d)
SHMEM_LIBNAME    = openshmem
SHMEM_LIBRARY    = lib$(SHMEM_LIBNAME).so
SHMEM_HEADERS    = shmem.h shmem.fh
SHMEM_INC_DIR    = $(PREFIX)/include

LIBS             = -lelf

INSTALL          = install -c
REMOVE           = rm -f

# ---------------------------------------------------------

.PHONY: all default
.PHONY:	malloc-obj-gen comms-obj-gen globalvar-obj-gen
.PHONY: broadcast-obj-gen collect-obj-gen barrier-obj-gen
.PHONY: install install-lib install-bin install-include
.PHONY: uninstall uninstall-lib uninstall-bin uninstall-include
.PHONY: clean distclean

# ---------------------------------------------------------

all default:	$(SHMEM_LIBRARY)

install:	install-lib install-bin install-include

install-lib:	all
	mkdir -p $(PREFIX)/lib
	$(INSTALL) $(SHMEM_LIBRARY) $(PREFIX)/lib

install-bin:	all
	$(MAKE) -C $(COMMS_DIR) $@

install-include:	all
	mkdir -p $(PREFIX)/include/mpp
	for f in $(SHMEM_HEADERS); do $(INSTALL) -m 644 mpp/$$f $(PREFIX)/include/mpp; done
	(cd $(PREFIX)/include; for f in $(SHMEM_HEADERS); do $(REMOVE) $$f; ln -s mpp/$$f; done)

# we may be sharing the install area with other packages, so don't
# blindly zap directories when uninstalling, allow them to remain
# there gracefully.

uninstall:	uninstall-lib uninstall-bin uninstall-include
	- rmdir $(PREFIX)

uninstall-lib:
	$(REMOVE) $(PREFIX)/lib/$(SHMEM_LIBRARY)
	- rmdir $(PREFIX)/lib

uninstall-bin:
	$(MAKE) -C $(COMMS_DIR) $@

uninstall-include:
	for h in $(SHMEM_HEADERS); do $(REMOVE) $(PREFIX)/include/mpp/$$h; $(REMOVE) $(PREFIX)/include/$$h; done
	- rmdir $(PREFIX)/include/mpp
	- rmdir $(PREFIX)/include

# -- comms layer -------------------------------------------

comms-obj-gen:
	$(MAKE) -C $(COMMS_DIR) all

# -- broadcast methods -------------------------------------

broadcast-obj-gen:
	$(MAKE) -C $(BROADCAST_DIR) all

# -- barrier methods ---------------------------------------

barrier-obj-gen:
	$(MAKE) -C $(BARRIER_DIR) all

# -- collect methods ---------------------------------------

collect-obj-gen:
	$(MAKE) -C $(COLLECT_DIR) all

# -- global variable----------------------------------------

globalvar-obj-gen:
	$(MAKE) -C $(GLOBALVAR_DIR) all

# -- local memory management for symmetric heap ------------

malloc-obj-gen:
	$(MAKE) -C $(MALLOC_DIR) all

memalloc.o:	memalloc.c
	$(CC) $(COMMON_FLAGS) $(MALLOC_CPPFLAGS) -c -o $@ $<

# -- fortran interface ------------------------------------

fortran.o:	fortran.c
	$(CC) $(WARNINGS) $(COMMON_FLAGS) -DFORTRAN_SINGLE_UNDERSCORE -c -o $@ $<

fortran-mem.o:	fortran-mem.c
	$(CC) $(WARNINGS) $(COMMON_FLAGS) -DFORTRAN_SINGLE_UNDERSCORE -c -o $@ $<

# -- otherwise, compile everything else like this ---------

%.o:	%.c
	$(CC) $(WARNINGS) $(COMMON_FLAGS) $(DEBUG_ME) -c -o $@ $<

# -- generate the shared object library -------------------

$(SHMEM_LIBRARY):	malloc-obj-gen comms-obj-gen globalvar-obj-gen \
			broadcast-obj-gen collect-obj-gen barrier-obj-gen \
			$(SHMEM_OBJECTS)
	$(LD) $(LDFLAGS) -shared -Wl,-soname,$@ -o $@ \
		$(MALLOC_OBJECT) $(COMMS_OBJ) $(GLOBALVAR_OBJ) \
		$(BROADCAST_OBJ) $(BARRIER_OBJ) $(COLLECT_OBJ) \
		$(SHMEM_OBJECTS) $(LIBS)

# ---------------------------------------------------------

clean:
	$(REMOVE) $(SHMEM_OBJECTS)
	$(MAKE) -C $(MALLOC_DIR) $@
	$(MAKE) -C $(COMMS_DIR) $@
	$(MAKE) -C $(GLOBALVAR_DIR) $@
	$(MAKE) -C $(BROADCAST_DIR) $@
	$(MAKE) -C $(COLLECT_DIR) $@
	$(MAKE) -C $(BARRIER_DIR) $@
	$(REMOVE) $(SHMEM_LIBRARY)

distclean: clean
	$(REMOVE) Makefile
